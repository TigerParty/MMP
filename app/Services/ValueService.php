<?php
namespace App\Services;

use App\Argo\FormField;
use App\Argo\ProjectValue;
use App\Argo\ReportValue;
use App\Argo\Project;
use App\Argo\Report;

use App\Repositories\ProjectValueRepository;

class ValueService
{
    /**
     * Project ID / Report ID
     *
     * @var int
     */
    private $entityId;

    /**
     * project or report
     *
     * @var str
     */
    private $entityType;

    /**
     * Form Field Ids
     *
     * @var array
     */
    private $formFieldIds;

    /**
     * Inputs of form fields
     *
     * @var array key: Form Field ID, value: Form Field Value of project/report
     */
    private $inputs;

    /**
     * Result of the value be generated by calculation functions.
     *
     * @var array key: Form Field ID, value: Generated Form Field Value of project/report
     */
    public $generatedResult;

    public function __construct($entityId, $entityType)
    {
        if($entityType != 'project' && $entityType != 'report') {
            throw new \Exception("Invalid entity type: $entityType");
        }

        $this->entityId = $entityId;
        $this->entityType = $entityType;
    }

    /**
     * Calculate all formulation form fields value of entity.
     *
     * @return ValueService Object
     */
    public function calcFormula()
    {
        if($this->entityType != 'project') {
            throw new Exception("CalcFormula() only support project entity!");
        }
        $project = Project::select([
                'project.id',
                'project.parent_id',
                'project.uid',
                'parent_project.uid as parent_uid',
                'container.form_id',
            ])
            ->leftJoin('project as parent_project', 'project.parent_id', '=', 'parent_project.id')
            ->leftJoin('container', 'project.container_id', '=', 'container.id')
            ->findOrFail($this->entityId);

        $valueRepo = new ProjectValueRepository();
        $existingFormIds = array_pluck($valueRepo->getFormsFromExistValues($this->entityId), 'id');
        if($project->form_id) {
            array_push($existingFormIds, $project->form_id);
        }

        $formulationFormFields = FormField::whereNotNull('formula')
            ->whereIn('form_id', $existingFormIds)
            ->get(['id', 'formula']);
        if(!$formulationFormFields) {
            $this->generatedResult = [];
            return $this;
        }

        $formulas = array_pluck($formulationFormFields, 'formula', 'id');
        $operandFieldIds = [];
        foreach ($formulas as $formulationFormFieldId => &$formula) {
            try {
                $formula = $this->replaceFormula($formulationFormFieldId, $formula, $formulas, []);
                $operandFieldIds[$formulationFormFieldId] = $this->getFieldIds($formula);
            } catch (\Exception $e) {
                throw $e;
            }
        }

        $operandValues = $project->values()
            ->whereIn('form_field_id', array_unique(array_flatten($operandFieldIds)))
            ->get(['form_field_id', 'value']);
        $operandValues = array_pluck($operandValues, 'value', 'form_field_id');

        $results = [];
        foreach ($formulas as $formulationFormFieldId => $calculable) {
            if ($calculable) {
                foreach ($operandFieldIds[$formulationFormFieldId] as $operandFieldId) {
                    $calculable = str_replace("[$operandFieldId]",
                        $this->getOperandValue($operandFieldId, $operandValues),
                        $calculable
                    );
                }
                $calculable = str_replace("[puid]", $project->parent_uid, $calculable);
                $calculable = str_replace("[uid]", $project->uid, $calculable);

                $results[$formulationFormFieldId] = $this->calculateFormula($calculable);
            }
        }

        $this->generatedResult = $results;

        return $this;
    }

    /**
     * Parse tracker meta by tracker data.
     *
     * @param $input: (array) key: Tracker Form Field ID, value: GPS raw data
     * @return ValueService Object
     */
    public function calcTrackerMeta($inputs)
    {
        $results = [];
        foreach ($inputs as $formFieldId => $trackerData) {
            try {
                $trackerData = json_decode($trackerData, true);

                if(!$trackerData) {
                    throw new \Exception("Got empty tracker data");
                }

                $startAt = date("Y-m-d H:i:s", $trackerData[0][2]);
                $endAt = date("Y-m-d H:i:s", end($trackerData)[2]);

                $totalDistance = 0;
                foreach ($trackerData as $index => $value) {
                    $distance = 0;

                    if($index != 0) {
                        $distance = sqrt(pow($trackerData[$index][0] - $trackerData[$index-1][0], 2) +
                                         pow($trackerData[$index][1] - $trackerData[$index-1][1], 2)
                        );

                        $totalDistance += $distance;
                    }
                }

                $avgSpeed = 0;
                $timeLong = (end($trackerData)[2]-$trackerData[0][2]) / 3600; //-- hours

                if($timeLong > 0) {
                    $avgSpeed = round($totalDistance * 111 / $timeLong, 2); //-- km/hr
                }

                $results[$formFieldId] = json_encode(array(
                        'avg_speed' => $avgSpeed,
                        'start_at' => $startAt,
                        'end_at' => $endAt,
                        'coordinates' => $trackerData
                    ), JSON_NUMERIC_CHECK);
            } catch (\Exception $e) {
                \Log::error($e);

                $results[$formFieldId] = json_encode(array(
                        'avg_speed' => 0,
                        'start_at' => "",
                        'end_at' => "",
                        'coordinates' => $trackerData
                    ), JSON_NUMERIC_CHECK);
            }

            $this->generatedResult = $results;

            return $this;
        }
    }

    /**
     * Calculate the distance from entity coordinate to capital of root region of entity project.
     *
     * @param $formFieldIds: (array) capital distance fields
     * @return ValueService Object
     */
    public function calcCapitalDistance($formFieldIds)
    {
        $this->formFieldIds = is_array($formFieldIds) ? $formFieldIds : func_get_args();

        $results = [];
        if($this->entityType == 'project') {
            $entity = Project::select([
                    'project.lat as entityLat',
                    'project.lng as entityLng',
                    'region.capital_lat as capitalLat',
                    'region.capital_lng as capitalLng',
                ])
                ->leftjoin('relation_project_belongs_region as rpbr', 'rpbr.project_id', '=', 'project.id')
                ->leftjoin('region', 'region.id', '=', 'rpbr.region_id')
                ->leftjoin('region_label', 'region_label.name', '=', 'region.label_name')
                ->where('project.id', '=', $this->entityId)
                ->whereNotNull('region.capital_lat')
                ->whereNotNull('region.capital_lng')
                ->whereNotNull('project.lat')
                ->whereNotNull('project.lng')
                ->orderBy('region_label.order', 'DESC')
                ->first();
        } else if ($this->entityType == 'report') {
            $entity = Report::select([
                    'report.lat as entityLat',
                    'report.lng as entityLng',
                    'region.capital_lat as capitalLat',
                    'region.capital_lng as capitalLng',
                ])
                ->leftjoin('project', 'report.project_id', '=', 'project.id')
                ->leftjoin('relation_project_belongs_region as rpbr', 'rpbr.project_id', '=', 'project.id')
                ->leftjoin('region', 'region.id', '=', 'rpbr.region_id')
                ->leftjoin('region_label', 'region_label.name', '=', 'region.label_name')
                ->where('report.id', '=', $entityId)
                ->whereNotNull('region.capital_lat')
                ->whereNotNull('region.capital_lng')
                ->whereNotNull('report.lat')
                ->whereNotNull('report.lng')
                ->orderBy('region_label.order', 'DESC')
                ->first();
        }

        if($entity) {
            $differentiaLat = $entity->capitalLat - $entity->entityLat;
            $differentiaLng = $entity->capitalLng - $entity->entityLng;
            $distance = round(sqrt(pow($differentiaLat, 2) + pow($differentiaLng, 2)) * 111, 2); // KM

            foreach ($this->formFieldIds as $formFieldId) {
                $results[$formFieldId] = $distance;
            }
        }

        $this->generatedResult = $results;

        return $this;
    }

    public function calcProjectUID()
    {
        if($this->entityType != 'project') {
            throw new \Exception("[Value Service] Unique ID only support project entity!");
        }

        $project = Project::select([
                'id',
                'container_id',
                'parent_id',
                'uid',
            ])
            ->with([
                'container' => function($query) {
                    $query->select([
                        'id',
                        'uid_rule'
                    ]);
                }
            ])
            ->findOrFail($this->entityId);

        if(!is_null($project->uid) || !$project->container->uid_rule) {
            $this->generatedResult = $project->uid;
            return $this;
        }

        try {
            $maxProjectUID = Project::where('container_id', '=', $project->container_id);
            if(in_array('parent_id', $project->container->uid_rule['unique_on']['project'])) {
                $maxProjectUID = $maxProjectUID->where('parent_id', '=', $project->parent_id);
            }
            $maxProjectUID = $maxProjectUID->max('uid');

            $this->generatedResult = (integer)$maxProjectUID + 1;
            return $this;
        } catch (\Exception $e) {
            throw $e;
        }
    }

    /**
     * Get generated result
     *
     * @return ValueService->generatedResult
     */
    public function getResult()
    {
        return $this->generatedResult;
    }

    /**
     * Arrange generatedResults schema to the same of form value table(project_value, report_value).
     *
     * @return array
     */
    public function toFormValueTableSchema()
    {
        $entityValues = array();
        foreach ($this->generatedResult as $formFieldId => $value) {
            array_push($entityValues, array(
                $this->entityType.'_id' => $this->entityId,
                'form_field_id' => $formFieldId,
                'value' => $value,
            ));
        }

        return $entityValues;
    }

    /**
     * Update the generated value to database
     *
     * @return array: updated rows
     */
    public function updateValue()
    {
        $updateEntityValues = $this->toFormValueTableSchema();
        $tableName = $this->entityType.'_value';

        try {
            \DB::beginTransaction();

            \DB::table($tableName)->where($this->entityType.'_id', '=', $this->entityId)
                ->whereIn('form_field_id', array_pluck($updateEntityValues, 'form_field_id'))
                ->delete();
            \DB::table($tableName)->insert($updateEntityValues);

            \DB::commit();

            return $updateEntityValues;
        } catch (\Exception $e) {
            \DB::rollback();
            \Log::error($e);
            throw $e;
        }
    }

    private function replaceFormula($formulationFormFieldId, $formula, $formulas, $throughIds) {
        $operandFieldIds = $this->getFieldIds($formula);
        foreach ($operandFieldIds as $operandFieldId) {
            if(in_array($operandFieldId, $throughIds)){
                throw new \Exception("Error occurred, circular reference detected for form_field_id $formulationFormFieldId");
            }
            if(array_get($formulas, $operandFieldId, null)) {
                $replacedFormula = $this->replaceFormula($formulationFormFieldId, $formulas[$operandFieldId], $formulas, $throughIds);
                $formula = str_replace("[$operandFieldId]", '('.$replacedFormula.')', $formula);
            }
            array_push($throughIds, $operandFieldId);
        }

        return $formula;
    }

    private function getFieldIds($formula)
    {
        $matches = [];
        preg_match_all('/\[[0-9]{1,}\]/', $formula, $matches);
        foreach ($matches[0] as &$id) {
            $id = preg_replace("/\[|\]/", "" , $id);
        }
        return $matches[0];
    }

    private function getOperandValue($fieldId, $operandValues)
    {
        return array_get(
            $operandValues,
            $fieldId,
            null
        );
    }

    private function calculateFormula($formula)
    {
        try {
            return eval("return $formula;");
        } catch (\Exception $e) {
            \Log::error("eval() Exception: " . $e->getMessage());

            return 0;
        } catch (\ParseError $e) {
            \Log::error("eval() ParseError: " . $e->getMessage());

            return 0;
        }
    }
}
